##########################################################################
## Script to check for errors in the RedDog and BlueDog pipeline        ##
## Lesley Raven - 09/12/2014                                            ##
##########################################################################
#Copyright (c) 2015, Lesley Raven
#All rights reserved. (see README.txt for more details)

### Enter location of your log directory

log_dir=log
if [ -s tmp_log.txt ]; then rm tmp_log.txt; fi

### Check for errors
echo "Checking $log_dir...."
grep -ir 'EOF \|CANCELLED\|FAILED\| EXIT \|TIME LIMIT\|KILLED\|Warning\|malformatted\|died\|error \|error while loading\|cutoff is higher\|failed to \|No such file' $log_dir/* | sed 's/:/\t/g' >> tmp_log.txt

#grep -ir "failed" log/*

### Print summary of errors
n_err=`cat tmp_log.txt | wc -l`
echo ""
if [ -s tmp_log.txt ]
        then
	echo "You have $n_err errors! :("
        echo ""
        cat tmp_log.txt | cut -f3-20 | sort | uniq -c
        echo ""
        echo "See tmp_log.txt for file names"
        else
	echo "You have NO errors! YAYE!"
        if [ -s tmp_log.txt ]; then rm tmp_log.txt; fi
        fi
echo ""
if grep -q 'IO Error' tmp_log.txt; then echo "IO Error: Check disk usage, re-run pipeline the communication has been disrupted"; else :;fi

### Find first pipeline step with an error
res=`cat RedDog_config.py | grep ": {" | tr ":{" '_' | sed 's/"//g' | sed 's/_//g' | tr '\n' ' '`
for i in $res; do 
	grep -q $i tmp_log.txt
	if [ $? -eq 0 ]
	then
		echo First step with an error is: $i
		cat tmp_log.txt | grep $i | head -2
		exit 0
	else
		continue
	fi
done

